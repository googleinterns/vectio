[General]
#####Config#####
# sets the transport to "HomaTransport" and the parameters for that transport.

# simulation global configuration options
simtime-scale = -15
sim-time-limit = 100000ms
cmdenv-express-mode = true
warmup-period = 0ms
network = DcnTopo
num-rngs = 1

##### Don't change the following config line. parseXMLConfig() ######
#### function in WorkloadSynthesizer class depends on this line. ####
**.host[*].trafficGeneratorApp[0].destAddresses = moduleListByPath("**.host[*]")

############# per module configuration ###############
# Note: if you modified any of the parameters under this section make sure to
# reflect appropriate changes to IPAddress assignment section in
# IPv4Configurator section in config.xml.
DcnTopo.numServersPerTor = ${numServersPerTor = 16}
DcnTopo.numTors = ${numTors = 9}
DcnTopo.fabricLinkSpeed = ${fabricLinkSpeed = 40Gbps}
DcnTopo.nicLinkSpeed = ${nicLinkSpeed = 10Gbps}
DcnTopo.edgeLinkDelay = ${edgeLinkDelay = 0.0us}
DcnTopo.fabricLinkDelay = ${fabricLinkDelay = 0.0us}
DcnTopo.hostSwTurnAroundTime = ${hostSwTurnAroundTime = 0.5us}
DcnTopo.hostNicSxThinkTime = ${hostNicSxThinkTime = 0.5us}
DcnTopo.switchFixDelay = ${switchFixDelay = 0.25us}
DcnTopo.isFabricCutThrough = ${isFabricCutThrough = false}
**.host[*].numTrafficGeneratorApp = 1
**.eth[*].queueType = "DropTailQueue"

######################## Homa Transport Parameters ###############################
**.host[*].**.rttBytes = ${RTT=0x2710} B ##10000B is the min RTT in bytes
**.host[*].transportSchemeType = "${transportSchemeType = HomaTransport}"
**.host[*].transportScheme.isRoundRobinScheduler = ${isRoundRobinScheduler = false}
**.host[*].transportScheme.useUnschRateInScheduler = ${useUnschRateInScheduler = false}
**.host[*].transportScheme.maxOutstandingRecvBytes = ${maxOutstandingRecvBytes = $RTT} B
# Possible string values: STATIC_CBF_UNIFORM, STATIC_CDF_UNIFORM, STATIC_CBF_GRADUATED
**.host[*].transportScheme.unschedPrioResolutionMode = "${unschedPrioResolutionMode = STATIC_CBF_GRADUATED}"
# Possible values 1.0/2.0, 2.0/3.0, 4.0/3.0. Lower number, mean higher priorities carry more traffic
**.host[*].transportScheme.unschedPrioUsageWeight = ${unschedPrioUsageWeight = 1}
**.host[*].transportScheme.cbfCapMsgSize = "${cbfCapMsgSize = $RTT}"
**.host[*].transportScheme.boostTailBytesPrio = "${boostTailBytesPrio = $RTT}"
**.host[*].transportScheme.defaultReqBytes = ${defaultReqBytes = 1442 }B
**.host[*].transportScheme.defaultUnschedBytes = ${defaultUnschedBytes = 7886 }B
**.host[*].transportScheme.senderScheme = "${senderScheme = SRBF}" #Possible values: OBSERVE_PKT_PRIOS, SRBF
**.host[*].transportScheme.accountForGrantTraffic = ${accountForGrantTraffic = true}
**.host[*].transportScheme.linkCheckBytes = 1600B
**.host[*].transportScheme.localPort = 2222
**.host[*].transportScheme.destPort = 2222
**.eth[*].**.transportType = "HomaTransport"
**.realLoadFactor = ${rlf= 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.83, 0.87, 0.9}
#result-dir = results/testing/unschedPrio/LoadFactor__${rlf}--UnschedResolutionMode__${unschedPrioResolutionMode}--boostTailBytesPrio__${boostTailBytesPrio}


[Config RecordAllStats]
#enable vector recording for globalListener
**.globalListener.**.result-recording-modes = all
**.globalListener.**.vector-recording = true

#disable vector recording for all other modules
**.vector-recording = false

#WorkloadSynthesizer stats, only non templated ones are enabled
**.trafficGeneratorApp[*].sentMsg.result-recording-modes = all
**.trafficGeneratorApp[*].rcvdMsg.result-recording-modes = all
**.trafficGeneratorApp[*].msgE2EDelay.result-recording-modes = all
#**.trafficGeneratorApp[*].**.result-recording-modes = all

#HomaTransport stats
**.transportScheme.**.result-recording-modes = all

#EthernetMac stats
**.mac.txPk.result-recording-modes = all
**.mac.rxPkOk.result-recording-modes = all
**.mac.frameRcvdTimeStamptAtMAC.result-recording-modes = all
**.mac.frameSentTimeStamptAtMAC.result-recording-modes = all

#DropTailQueue stats
**.dataQueue.rcvdPk.result-recording-modes = all
**.dataQueue.queueLength.result-recording-modes = all
**.dataQueue.queueByteLength.result-recording-modes = all
**.dataQueue.queueingTime.result-recording-modes = all
**.dataQueue.requestQueueingTime.result-recording-modes = all
**.dataQueue.grantQueueingTime.result-recording-modes = all
**.dataQueue.schedDataQueueingTime.result-recording-modes = all
**.dataQueue.unschedDataQueueingTime.result-recording-modes = all

# Exclude every other stats from recording
**.result-recording-modes = -

[Config WorkloadGoogleSearchRpc]
extends = RecordAllStats
**.host[*].trafficGeneratorApp[*].typename = "WorkloadSynthesizer"
**.host[*].**.workloadType = "${workloadType = GOOGLE_SEARCH_RPC}"
**.host[*].trafficGeneratorApp[*].msgSizeRanges = "${msgSizeRanges =2 3 4 8 32 34 36 38 40 43 46 49 53 58 64 67 71 75 80 85 91 98 107 116 128 135 142 151 160 171 183 197 213 233 256 269 284 301 320 341 366 394 427 465 512 539 569 602 640 683 731 788 853 931 1024 1078 1365 2048 3151 4096 5120 6302 7447 8192 9102 10240 11703 12603 13653 14895 16384 17246 18204 19275 20480 25206 29789 34493 40960 46811 50412 54613 59578 65536 72818 81920 93623 100825 119156 137971 163840 187246 201649 262144 308405 403298 524288 1071908 3529904}"
**.host[*].trafficGeneratorApp[*].loadFactor = ${loadFactor = $rlf*0.796}
**.host[*].trafficGeneratorApp[*].interArrivalDist = "${interArrivalDist = exponential}"
**.host[*].trafficGeneratorApp[*].startTime = ${startTime = 0s}
**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime = 0.6s, 0.6s, 0.55s, 0.5s, 0.45s, 0.375s, 0.375s, 0.35s, 0.3s, 0.3s ! rlf}
seed-set = ${repetition}
seed-0-mt = ${seedInd = 0..9 ! rlf}
**.host[*].transportScheme.prioLevels = ${prioLevels = 8}
**.host[*].transportScheme.adaptiveSchedPrioLevels = ${adaptiveSchedPrioLevels = 1, 2, 3, 4, 5, 6, 7}
**.host[*].transportScheme.numSendersToKeepGranted = ${numSendersToKeepGranted = $adaptiveSchedPrioLevels}
**.host[*].transportScheme.prioResolverPrioLevels = ${prioResolverPrioLevels = $prioLevels-$adaptiveSchedPrioLevels}
result-dir = results/manyReceivers/unschedVsSchedPrioDivision



[Config WorkloadFabricatedHeavyMiddle]
extends = RecordAllStats
**.host[*].trafficGeneratorApp[*].typename = "WorkloadSynthesizer"
**.host[*].**.workloadType = "${workloadType = FABRICATED_HEAVY_MIDDLE}"
**.host[*].trafficGeneratorApp[*].msgSizeRanges = "${msgSizeRanges =51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 71 72 73 75 76 77 79 81 82 84 86 88 90 92 94 96 99 101 104 107 110 113 116 120 124 128 132 136 141 147 152 158 165 172 180 189 198 209 220 233 248 265 284 306 331 362 398 443 499 571 667 803 1002 1061 1128 1203 1290 1389 1506 1644 1809 2012 2266 2593 3030 3645 4572 6134 7245 7607 8006 8450 8946 9503 10135 10857 11689 12659 13806 15180 16858 18954 21645 25226 30226 37700 50083 316228}"
**.host[*].trafficGeneratorApp[*].loadFactor = ${loadFactor = $rlf*0.892}
**.host[*].trafficGeneratorApp[*].interArrivalDist = "${interArrivalDist = exponential}"
**.host[*].trafficGeneratorApp[*].startTime = ${startTime = 0s}
**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime = 0.6s, 0.6s, 0.55s, 0.5s, 0.45s, 0.375s, 0.375s, 0.35s, 0.3s, 0.3s ! rlf}
seed-set = ${repetition}
seed-0-mt = ${seedInd = 0..9 ! rlf}
**.host[*].transportScheme.prioLevels = ${prioLevels = 8}
**.host[*].transportScheme.adaptiveSchedPrioLevels = ${adaptiveSchedPrioLevels = 1, 2, 3, 4, 5, 6, 7}
**.host[*].transportScheme.numSendersToKeepGranted = ${numSendersToKeepGranted = $adaptiveSchedPrioLevels}
**.host[*].transportScheme.prioResolverPrioLevels = ${prioResolverPrioLevels = $prioLevels-$adaptiveSchedPrioLevels}
result-dir = results/manyReceivers/unschedVsSchedPrioDivision



[Config WorkloadGoogleAllRpc]
extends = RecordAllStats
**.host[*].trafficGeneratorApp[*].typename = "WorkloadSynthesizer"
**.host[*].**.workloadType = "${workloadType = GOOGLE_ALL_RPC}"
**.host[*].trafficGeneratorApp[*].msgSizeRanges = "${msgSizeRanges =3 32 36 40 46 53 64 70 77 85 96 110 128 137 146 158 171 186 205 228 256 268 282 296 313 331 352 375 402 433 469 512 531 573 597 623 683 717 755 796 843 956 1053 1117 1189 1271 1317 1418 1475 1603 1755 2137 2341 2657 3511 4535 5521 7256 9078 10335 13435 16861 21984 25170 30468 40018 45220 50244 55146 60293 65902 70217 75137 80248 85482 90049 95133 100825 110247 120372 129632 140605 150160 160275 170901 180895 190944 200864 249460 300435 350288 401080 450652 501350 603313 701172 805723 907174 1008790 5114695 10668901 20000000}"
**.host[*].trafficGeneratorApp[*].loadFactor = ${loadFactor = $rlf*0.887}
**.host[*].trafficGeneratorApp[*].interArrivalDist = "${interArrivalDist = exponential}"
**.host[*].trafficGeneratorApp[*].startTime = ${startTime = 0s}
**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime = 0.6s, 0.6s, 0.55s, 0.5s, 0.45s, 0.375s, 0.375s, 0.3s, 0.3s, 0.3s ! rlf}
seed-set = ${repetition}
seed-0-mt = ${seedInd = 0..9 ! rlf}
**.host[*].transportScheme.prioLevels = ${prioLevels = 8}
**.host[*].transportScheme.adaptiveSchedPrioLevels = ${adaptiveSchedPrioLevels = 1, 2, 3, 4, 5, 6, 7}
**.host[*].transportScheme.numSendersToKeepGranted = ${numSendersToKeepGranted = $adaptiveSchedPrioLevels}
**.host[*].transportScheme.prioResolverPrioLevels = ${prioResolverPrioLevels = $prioLevels-$adaptiveSchedPrioLevels}
result-dir = results/manyReceivers/unschedVsSchedPrioDivision
