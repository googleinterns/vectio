## Make file for test source code

CC=g++

## compiler flags
CFLAGS = -Wall -g -std=c++0x

## Binary directory containing the executables
BINDIR=obj

## contains all library paths in -LPATH format
LFLAGS=-L../../../omnetpp-4.6/lib

## library .a or .so file names are added here
## drop trailing extension and word "lib" from the begining of file name and 
## add -l flag to remaining part

LIBS = -lm -loppcmdenvd -loppcommond -loppenvird \
	-loppeventlogd -lopplayoutd \
	-loppnedxmld -loppscaved -loppsimd \
	-lopptkenvd


## source directories other than current directory 
OTHERDIR=../../src/application

## All include directories
IFLAGS=-I.
IFLAGS+=-I../../src
IFLAGS+=-I../../../omnetpp-4.6/include

## all source files in ./ directory or other directories
SOURCE=TestMain.cc
SOURCE+=../../src/application/MsgSizeDistributions.cc

## obj directory in the source directory will contain the object files
OBJS=$(join $(addsuffix obj/, $(dir $(SOURCE))), $(notdir $(SOURCE:.cc=.o)))

## .dep dependency directory in source directory will contain make .h 
## dependencies information
DEPENDS = $(join $(addsuffix .dep/, $(dir $(SOURCE))), $(notdir $(SOURCE:.cc=.d)))

## The ultimate binary target file
TARGET=$(BINDIR)/TestMain

## default rule
all: $(TARGET)
	@true

## Linking rule for making the target
$(TARGET): $(OBJS)
	@echo "====================="
	@echo "Linking the target $@"
	@echo "====================="
	@mkdir -p $(dir $(TARGET))
	$(CC) $(CFLAGS) $(IFLAGS) $(LFLAGS) $(LIBS) -o $@ $^
	@echo "-----Finished Linking-----"

## Generic compiling rule
%.o: %.cc
	@mkdir -p $(dir $@)
	@echo "============"
	@echo "compiling $@"
	$(CC) $(CFLAGS) $(IFLAGS) -c $< -o $@  

## Rule for object files in the current source directory 
## object files are located in obj directory under the source directory
obj/%.o: %.cc
	@mkdir -p $(dir $@)
	@echo "============"
	@echo "compiling $@"
	@echo "\"$(OBJS)\""
	@echo "\"$(OTHERDIR)/obj/\""
	$(CC) $(CFLAGS) $(IFLAGS) -c $< -o $@

## Rule for object in other source directory. object files are compiled into
## obj directory under the other source directory.
## you will need one rule like this per "other" directories
$(OTHERDIR)/obj/%.o: $(OTHERDIR)/%.cc
	@mkdir -p $(dir $@)
	@echo "============"
	@echo "compiling $@"
	$(CC) $(IFLAGS) $(CFLAGS) -c $< -o $@

## Make dependancy rules for current source directory
## dependency .d files are stored under .dep directory in 
## source directory
.dep/%.d: %.cc
	@mkdir -p $(dir $@)
	@echo "============"
	@echo "Building dependencies file for $*.o"
	@$(SHELL) -ec '$(CC) -M $(IFLAGS) $(CFLAGS) $< | sed "s^$*.o^obj/$*.o^" > $@'

## Dependency rule for "other" directory
## dependency .d files are stored under .dep directory in 
## the "other" source directory
$(OTHERDIR)/.dep/%.d: $(OTHERDIR)/%.cc
	@mkdir -p $(dir $@)
	@echo "============"
	@echo "Building dependencies file for $*.o"
	@$(SHELL) -ec '$(CC) -M $(IFLAGS) $(CFLAGS) $< | sed "s^$*.o^$(OTHERDIR)/obj/$*.o^" > $@'

## Include the dependency files
-include $(DEPENDS)

.PHONY: clean

clean:
	@-rm -f $(TARGET) $(OBJS) $(DEPENDS)

